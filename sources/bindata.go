// Code generated by go-bindata.
// sources:
// effe/effe.go
// effe/logic/logic.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _effeEffeGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x53\x4d\x6f\xdb\x30\x0c\x3d\xdb\xbf\x82\x33\xb0\x41\x0e\x0c\xa7\xc7\xa2\x43\x0f\x5b\x97\x7e\x00\xc5\x16\x24\x18\x76\x2c\x34\x9b\x76\x85\x3a\xb2\x47\xc9\x4d\x8b\xcc\xff\x7d\xa4\xe4\x04\xc5\xd0\x8b\x2d\x91\x7c\x4f\x7c\xe2\xd3\xa0\xab\x27\xdd\x22\xec\xb4\xb1\x69\x6a\x76\x43\x4f\x1e\x54\x9a\x64\xd8\x34\xb8\xec\xfa\xd6\x54\x19\xef\x9a\x4e\xb7\xe1\xbf\xf3\xf2\xe3\xf8\xd2\xbd\x3a\xfe\xc9\xce\xa2\x5f\x3e\x7a\x3f\xc8\xda\xbd\x5a\x06\xe4\x69\xda\x8c\xb6\x82\x16\x2d\x92\xf6\x78\xab\x6d\xdd\x21\xa9\xa1\xef\x3b\x58\x48\x4d\xb9\xe6\x65\x01\xcc\xd0\x22\x49\x48\xc8\xca\x5f\x64\x3c\x52\x0e\x02\x56\x42\x59\x6e\xd0\x0d\xbd\x75\x18\x33\x05\x2c\xe6\xe8\x9f\x11\x9d\xcf\xe1\x90\x26\x84\x7e\x24\x1b\x21\x7b\x78\x17\x44\xef\xc0\x92\xca\xbf\xc0\xc5\x25\x48\x4b\xe5\x0d\x7a\x95\x97\x2a\xc8\x2d\xaf\x7a\xeb\xf1\xc5\xe7\x5c\x53\x63\xc3\xdd\x05\xea\x08\x4a\x4c\xc3\x6c\x0c\x23\xac\xfa\x67\x56\x94\x7f\xe6\xfd\x87\x4b\xb0\xa6\x8b\x05\xc9\x3e\xaa\xb8\x45\x5d\x73\x3e\x9c\xbb\xf5\xda\x8f\xee\x8e\x69\xc9\xea\x6e\x8b\xc4\xc8\x15\x51\x4f\x79\x40\xc4\x4b\x28\xaf\x18\xa6\xb2\x7b\xe9\x01\xd6\xda\x9a\xea\x09\xeb\x2c\x54\x4c\xfc\x99\x94\x2c\x91\xc2\xe9\xb1\xd1\xcd\x68\x15\xab\x28\x60\xcf\x12\x25\xcb\xcd\x49\xc1\xdb\x76\x66\xee\x6f\xf8\x7b\x6c\x15\x27\xcb\x70\xae\xca\xa5\x5c\x68\x83\xfc\xf5\xe8\x85\x88\x63\x53\x3a\xcd\xa3\x13\x43\x44\xd1\xc1\x12\x7c\xa8\x78\xa0\x64\x11\x2a\x93\x48\x56\xc0\xf9\xd9\xf9\x59\x01\xd9\x5a\xf2\xfb\x47\x24\x04\x27\xd2\xc0\x3f\x22\x88\x7d\x4a\xe9\xde\xd8\xa6\x3f\xa1\xbf\xf2\x69\x2a\x93\x10\xc3\x1b\xdd\x39\x14\x3c\x19\xeb\x4f\x20\x90\x2c\xed\xb4\x37\xbd\x2d\x24\x6a\x01\x5f\x8c\x0f\x5c\x81\x63\xad\xc9\xa1\x5c\x06\xab\x5d\x04\x76\x11\xca\xc6\x2c\x03\x51\x67\xe7\x31\xde\x71\x4a\x54\x46\x7f\x88\xb4\x64\xa4\x2e\xb4\xc2\xb5\xdb\x41\x8a\x1b\x95\x5d\x7c\xac\xb9\x97\x85\x48\xe2\xea\x23\x94\x27\x11\x77\xad\xf8\xe7\x41\x50\xb3\x45\xbf\xe3\x5e\xcd\xcb\xfb\x1f\x37\x0f\xab\xcd\xe6\xef\x9b\xed\xcf\xed\x6a\xc3\x92\x78\x88\x0e\xae\xa9\xdf\xc1\x4a\x24\x49\xef\xcf\x9a\x80\xef\x58\x6c\x0f\x97\xf0\xe9\xf4\x06\x0e\x4c\x78\x71\xb4\x98\x11\x8b\x34\xba\xc2\xc3\x14\x54\xcd\xde\x8e\x5d\xb1\x8b\x28\xb4\x35\xb1\x94\xe0\xab\xf8\xac\xae\x05\x9b\x2d\x59\xc5\xff\xcf\x6d\x3e\xef\xf8\xcc\x64\xe8\x01\x77\x6f\x9c\x47\xfb\xc5\xd6\xc1\x8a\x8a\xaf\xa5\x10\xc7\xe4\x3c\xfc\x7f\x01\x00\x00\xff\xff\x44\x09\xfe\x45\x10\x04\x00\x00")

func effeEffeGoBytes() ([]byte, error) {
	return bindataRead(
		_effeEffeGo,
		"effe/effe.go",
	)
}

func effeEffeGo() (*asset, error) {
	bytes, err := effeEffeGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "effe/effe.go", size: 1040, mode: os.FileMode(436), modTime: time.Unix(1459443824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _effeLogicLogicGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x90\xcd\xaa\xdb\x30\x10\x85\xd7\xd5\x53\x0c\x82\x82\xd4\x1a\xa7\x69\x4b\x17\x81\xae\x42\x7f\xb2\x09\x25\x69\xe9\xa6\xd0\x08\x7b\x1c\x8b\xda\x23\x57\x1e\xc7\xb9\x84\xbc\xfb\x1d\x99\x38\x37\x1b\x5b\x9a\x39\x33\xe7\xd3\xe9\x5c\xf1\xcf\x1d\x11\x9a\x70\xf4\x85\x52\xbe\xed\x42\x64\x30\xea\x95\xae\x5a\xd6\xf2\x6b\x1d\xd7\x8b\xe8\xa8\x4c\x17\x42\x5e\xd4\xcc\x5d\x3a\xb3\x6f\x51\x2b\xab\xd4\xc9\x45\xd8\x50\x15\xa0\xe7\xe8\xe9\x08\x9f\xe1\xa0\x2e\x49\xec\x44\xb0\x02\x5d\x63\xd3\x84\xbf\x58\x55\xa8\x33\x29\x9f\x30\xf6\x3e\x50\xea\xbc\xcb\x97\x53\xa9\x0c\x85\x06\xb9\x7f\x43\xe6\xb4\xa1\x67\x27\x10\xa3\xe7\x1a\xa6\x31\x75\x55\x07\xa5\xf8\xa9\x43\x58\x07\x62\x3c\x73\xf2\x1a\x0a\x06\xf1\x39\xb9\x66\x40\xf0\xc4\x9f\x3e\x8a\x4e\x55\x03\x15\x82\xe3\xd9\xd8\xd4\x4d\xe4\xf9\x1e\xb1\x34\x89\x37\xdf\x86\xd1\xd8\xfc\xd7\xcf\x75\xfa\x92\x3f\x6f\x1d\x05\x63\xed\x7d\x70\x9f\x9c\x65\x72\xb6\x91\x0d\x92\x43\xfe\x43\x1e\xc6\x0d\x19\x3d\xf5\x81\x70\x9c\x15\xda\x8a\x07\xf2\x10\x69\xae\x5c\x96\xf0\x16\x26\xdb\x8d\x30\x7d\x20\xf3\xde\x5e\xef\xfb\x77\x03\x99\x82\xcf\xb3\x36\x83\x11\x52\x9e\xf9\x0e\xfb\x2e\x50\x8f\xbf\xa3\x67\x8c\x19\x44\x78\x73\xab\xff\x1f\xb0\x67\x0b\x18\x63\x88\x33\xce\xd7\x2e\xf1\x54\x66\xcc\x40\x7f\x4f\xe9\x42\x15\x43\x0b\x5f\x24\xab\x15\xc0\xeb\xf2\x0f\xe9\x0c\xc4\x26\x9f\xb2\x79\x21\x24\xdf\x3c\xbc\x34\x74\x8f\x28\x92\x16\xdc\x64\x57\xf5\x1c\x00\x00\xff\xff\x63\xf4\xe0\x2f\x16\x02\x00\x00")

func effeLogicLogicGoBytes() ([]byte, error) {
	return bindataRead(
		_effeLogicLogicGo,
		"effe/logic/logic.go",
	)
}

func effeLogicLogicGo() (*asset, error) {
	bytes, err := effeLogicLogicGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "effe/logic/logic.go", size: 534, mode: os.FileMode(436), modTime: time.Unix(1459443736, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"effe/effe.go": effeEffeGo,
	"effe/logic/logic.go": effeLogicLogicGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"effe": &bintree{nil, map[string]*bintree{
		"effe.go": &bintree{effeEffeGo, map[string]*bintree{}},
		"logic": &bintree{nil, map[string]*bintree{
			"logic.go": &bintree{effeLogicLogicGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

