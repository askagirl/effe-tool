// Code generated by go-bindata.
// sources:
// effe/effe.go
// effe/logic/logic.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _effeEffeGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x53\xcd\x6e\xdb\x3c\x10\x3c\x5b\x4f\xb1\x9f\x80\xaf\xa0\x0c\x81\xce\x31\x48\x91\x43\x9b\x3a\x3f\x40\xd0\x1a\x36\x8a\x1e\x03\x46\x5e\xc9\x44\x64\xd2\x5d\x52\x71\x82\x54\xef\xde\x5d\x52\x09\x82\x22\x17\x89\xe4\xee\x0c\x67\xc8\xe1\xc1\x34\x0f\xa6\x43\xd8\x1b\xeb\x8a\xc2\xee\x0f\x9e\x22\xa8\x62\x56\xb6\xbd\xe9\x4a\xf9\xef\xa3\xfc\x3a\x1b\x77\xc3\xbd\x6e\xfc\x7e\x11\x6c\x68\xac\x59\x60\xdb\xe2\xa2\xf7\x9d\x6d\xa4\xce\x83\x45\x78\x0e\xfc\x93\x99\xc3\xb8\xd8\xc5\x78\x90\x71\x78\x76\xdc\x51\x15\x45\x3b\xb8\x06\x3a\x74\x48\x26\xe2\xb5\x71\xdb\x1e\x49\x1d\xbc\xef\x61\x2e\x3d\x7a\xc5\xc3\x1a\x98\xa1\x43\x92\x25\x21\xd3\xbf\xc8\x46\xa4\x0a\x04\xac\x84\x52\xaf\x31\x1c\xbc\x0b\x98\x2b\x35\xcc\xa7\xd5\xdf\x03\x86\x58\xc1\x4b\x31\x23\x8c\x03\xb9\x0c\x39\xc2\x87\x20\xfa\x00\x36\x6b\xe2\x13\x9c\x9d\x83\x48\xd2\x57\x18\x55\xa5\x55\xf2\xa7\x2f\xbc\x8b\xf8\x14\x2b\xee\xd9\x62\xcb\xea\x12\x75\x06\xcd\x6c\xcb\x6c\x0c\x23\x6c\xfc\x23\x3b\xaa\x3e\xf3\xfc\xbf\x73\x70\xb6\xcf\x0d\xb3\x63\x76\x71\x8d\x66\xcb\xf5\xb4\xef\x26\x9a\x38\x84\x1b\xa6\x25\x67\xfa\x0d\x12\x23\x97\x44\x9e\xaa\x84\xc8\x87\xa0\x2f\x18\xa6\xca\x5b\xd1\x00\x2b\xe3\x6c\xf3\x80\xdb\x32\x75\x8c\xfc\x19\x95\x0c\x91\xd2\xee\x59\xe8\x7a\x70\x8a\x5d\xd4\x70\x64\x8b\x52\x65\x71\xd2\xf0\x5e\xce\xc4\xfd\x0d\xef\x87\x4e\x71\x51\xa7\x7d\x55\x25\xed\x42\x9b\xec\xaf\x86\x28\x44\xbc\x36\x16\xe3\x74\x75\x12\x91\x6c\x3a\x85\x84\x37\x95\x8c\x68\x36\xa1\x4a\x59\x29\x6b\x38\x3d\x39\x3d\xa9\xa1\x5c\x49\xfd\xb8\x43\x42\x08\x62\x0d\xe2\x0e\x41\xf2\xa2\x45\xbd\x75\xad\x7f\x43\x7f\xe5\xdd\x54\x29\x4b\x0c\x6f\x4d\x1f\x50\xf0\x64\x5d\x7c\x03\x81\x54\x69\x6f\xa2\xf5\xae\x96\x55\x07\xf8\x64\x63\xe2\x4a\x1c\x2b\x43\x01\xe5\x30\xd8\xed\x3c\xb1\x8b\x51\x0e\xae\x4e\x44\xbd\x9b\xae\xf1\x86\x4b\xe2\x32\xe7\x43\xac\xcd\x06\xea\x93\x14\xee\xdd\x1c\xa4\xb9\x55\xe5\xd9\xff\x5b\xd6\x32\x17\x4b\xdc\xfd\x0a\xe5\x9b\xc8\xb3\x4e\xf2\x73\x27\xa8\x29\xa2\xdf\xf1\xa8\xa6\xe1\xed\x8f\xab\xbb\xe5\x7a\xfd\xe7\xdd\xf4\xe7\x66\xb9\x66\x4b\x7c\x89\x01\x2e\xc9\xef\x61\x29\x96\x44\xfb\xa3\x21\xe0\x33\x96\xd8\xc3\x39\x7c\x7a\x7b\x03\x2f\x4c\x78\xf6\x1a\x31\x2b\x11\x69\x4d\x83\x2f\x63\x72\x35\x65\x3b\xab\xe2\x14\x51\x92\x35\xb2\x95\x94\xab\xfc\xac\x2e\x05\x5b\x2e\xd8\xc5\xbf\xcf\x6d\xda\xef\xf5\x99\xc9\xa5\x27\xdc\xad\x0d\x11\xdd\x17\xb7\x4d\x51\x54\x7c\x2c\xb5\x24\xa6\xe2\xcb\xff\x1b\x00\x00\xff\xff\xab\x5a\x1c\x19\x22\x04\x00\x00")

func effeEffeGoBytes() ([]byte, error) {
	return bindataRead(
		_effeEffeGo,
		"effe/effe.go",
	)
}

func effeEffeGo() (*asset, error) {
	bytes, err := effeEffeGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "effe/effe.go", size: 1058, mode: os.FileMode(436), modTime: time.Unix(1458773439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _effeLogicLogicGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x90\xcd\xaa\xdb\x30\x10\x85\xd7\xd5\x53\x0c\x82\x82\xd4\x1a\xa7\x69\x4b\x17\x81\xae\x42\x7f\xb2\x09\x25\x69\xe9\xa6\xd0\x08\x7b\x1c\x8b\xda\x23\x57\x1e\xc7\xb9\x84\xbc\xfb\x1d\x99\x38\x37\x1b\x5b\x9a\x39\x33\xe7\xd3\xe9\x5c\xf1\xcf\x1d\x11\x9a\x70\xf4\x85\x52\xbe\xed\x42\x64\x30\xea\x95\xae\x5a\xd6\xf2\x6b\x1d\xd7\x8b\xe8\xa8\x4c\x17\x42\x5e\xd4\xcc\x5d\x3a\xb3\x6f\x51\x2b\xab\xd4\xc9\x45\xd8\x50\x15\xa0\xe7\xe8\xe9\x08\x9f\xe1\xa0\x2e\x49\xec\x44\xb0\x02\x5d\x63\xd3\x84\xbf\x58\x55\xa8\x33\x29\x9f\x30\xf6\x3e\x50\xea\xbc\xcb\x97\x53\xa9\x0c\x85\x06\xb9\x7f\x43\xe6\xb4\xa1\x67\x27\x10\xa3\xe7\x1a\xa6\x31\x75\x55\x07\xa5\xf8\xa9\x43\x58\x07\x62\x3c\x73\xf2\x1a\x0a\x06\xf1\x39\xb9\x66\x40\xf0\xc4\x9f\x3e\x8a\x4e\x55\x03\x15\x82\xe3\xd9\xd8\xd4\x4d\xe4\xf9\x1e\xb1\x34\x89\x37\xdf\x86\xd1\xd8\xfc\xd7\xcf\x75\xfa\x92\x3f\x6f\x1d\x05\x63\xed\x7d\x70\x9f\x9c\x65\x72\xb6\x91\x0d\x92\x43\xfe\x43\x1e\xc6\x0d\x19\x3d\xf5\x81\x70\x9c\x15\xda\x8a\x07\xf2\x10\x69\xae\x5c\x96\xf0\x16\x26\xdb\x8d\x30\x7d\x20\xf3\xde\x5e\xef\xfb\x77\x03\x99\x82\xcf\xb3\x36\x83\x11\x52\x9e\xf9\x0e\xfb\x2e\x50\x8f\xbf\xa3\x67\x8c\x19\x44\x78\x73\xab\xff\x1f\xb0\x67\x0b\x18\x63\x88\x33\xce\xd7\x2e\xf1\x54\x66\xcc\x40\x7f\x4f\xe9\x42\x15\x43\x0b\x5f\x24\xab\x15\xc0\xeb\xf2\x0f\xe9\x0c\xc4\x26\x9f\xb2\x79\x21\x24\xdf\x3c\xbc\x34\x74\x8f\x28\x92\x16\xdc\x64\x57\xf5\x1c\x00\x00\xff\xff\x63\xf4\xe0\x2f\x16\x02\x00\x00")

func effeLogicLogicGoBytes() ([]byte, error) {
	return bindataRead(
		_effeLogicLogicGo,
		"effe/logic/logic.go",
	)
}

func effeLogicLogicGo() (*asset, error) {
	bytes, err := effeLogicLogicGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "effe/logic/logic.go", size: 534, mode: os.FileMode(436), modTime: time.Unix(1458772485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"effe/effe.go": effeEffeGo,
	"effe/logic/logic.go": effeLogicLogicGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"effe": &bintree{nil, map[string]*bintree{
		"effe.go": &bintree{effeEffeGo, map[string]*bintree{}},
		"logic": &bintree{nil, map[string]*bintree{
			"logic.go": &bintree{effeLogicLogicGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

